<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="cy__pdaltmode__mngr_8h" kind="file" language="C++">
    <compoundname>cy_pdaltmode_mngr.h</compoundname>
    <includes refid="cy__pdaltmode__defines_8h" local="yes">cy_pdaltmode_defines.h</includes>
    <includedby refid="cy__pdaltmode__billboard_8h" local="yes">cy_pdaltmode_billboard.h</includedby>
    <includedby refid="cy__pdaltmode__billboard_8c" local="yes">cy_pdaltmode_billboard.c</includedby>
    <includedby refid="cy__pdaltmode__custom__hpi__vid_8c" local="yes">cy_pdaltmode_custom_hpi_vid.c</includedby>
    <includedby refid="cy__pdaltmode__dp__sid_8c" local="yes">cy_pdaltmode_dp_sid.c</includedby>
    <includedby refid="cy__pdaltmode__dp__sid_8h" local="yes">cy_pdaltmode_dp_sid.h</includedby>
    <includedby refid="cy__pdaltmode__hw_8c" local="yes">cy_pdaltmode_hw.c</includedby>
    <includedby refid="cy__pdaltmode__intel__vid_8h" local="yes">cy_pdaltmode_intel_vid.h</includedby>
    <includedby refid="cy__pdaltmode__mngr_8c" local="yes">cy_pdaltmode_mngr.c</includedby>
    <includedby refid="cy__pdaltmode__vdm__task_8c" local="yes">cy_pdaltmode_vdm_task.c</includedby>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1ga6e690e4726624215292ba6ac01d8bb4b" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_ATCH_TGT</name>
        <initializer>(1u)</initializer>
        <briefdescription>
<para>Internal Alt Modes manager denotation of attached UFP target. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="49" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1gaf9e238559658449787146f037960e867" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_CABLE</name>
        <initializer>(2u)</initializer>
        <briefdescription>
<para>Internal Alt Modes manager denotation of the attached cable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="52" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1gab902473a58fc39742864730a1845d172" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_MODE_NOT_SUPPORTED</name>
        <initializer>(0xFFu)</initializer>
        <briefdescription>
<para>Internal Alt Modes manager denotation of non supported Alternate Mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="55" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1ga841562ab8c8a6a994edc871dd36eb1c9" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_EMPTY_VDO</name>
        <initializer>(0x00000000u)</initializer>
        <briefdescription>
<para>Internal Alt Modes manager denotation in case if VDO sending not needed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="58" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1ga43f668351b413a09e9a45ba9481a591f" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_NONE_VDO</name>
        <initializer>(0xFFFFFFFFu)</initializer>
        <briefdescription>
<para>Internal Alt Modes manager denotation of zero VDO. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="61" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1gae4e2aa15a2cf04e0d55157a9d86b51bd" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_VDO_START_IDX</name>
        <initializer>(1u)</initializer>
        <briefdescription>
<para>Start index of VDO data in VDM message. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="64" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1ga32f02446252080652468730904046d39" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_NONE_MODE_MASK</name>
        <initializer>(0x00000000u)</initializer>
        <briefdescription>
<para>Empty mask. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="67" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1ga2030916ac854ea9e9cb31507fa6a9643" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_FULL_MASK</name>
        <initializer>(0xFFFFFFFFu)</initializer>
        <briefdescription>
<para>All bit set full mask. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="70" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1ga0056ad2fc48f744b625895b13dadb01f" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_EN_FLAG_MASK</name>
        <initializer>(0x00000001u)</initializer>
        <briefdescription>
<para>This mask is used by CY_PDALTMODE_MNGR_IS_FLAG_CHECKED macro to check if bit is set in some mask. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="73" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1ga327abc7734f01d684e4a1a8f732a5bfe" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_EXIT_ALL_MODES</name>
        <initializer>(0x7u)</initializer>
        <briefdescription>
<para>Object position corresponding to an Exit All Modes VDM command. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="76" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1gacb97e1a3f70d001c04a61721a2d9d32b" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_CBL_DIR_SUPP_MASK</name>
        <initializer>(0x780u)</initializer>
        <briefdescription>
<para>Mask to find out cable directionality support for cable discovery ID response. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="79" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1ga5f54d5bbc962097184b7a757a038e0f4" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_ALT_MODE_EVT_IDX</name>
        <initializer>(0u)</initializer>
        <briefdescription>
<para>Index of Alt Mode APP event code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="82" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1gabddbbcb4e73966fef68faeff0bb886b8" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_ALT_MODE_EVT_DATA_IDX</name>
        <initializer>(1u)</initializer>
        <briefdescription>
<para>Index of data for Alt Mode APP event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="85" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1ga2cb7840adbf420357dfbb997f0f2b3a3" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_NO_DATA</name>
        <initializer>(0u)</initializer>
        <briefdescription>
<para>Internal Alt Modes manager denotation of object without useful data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="88" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1gace9facd57c1e45b998eab65879e7b0bf" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_MAX_RETRY_CNT</name>
        <initializer>(9u)</initializer>
        <briefdescription>
<para>Maximum number of VDM send retries in case of no CRC response, timeout, or busy response. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="91" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1ga6b142b13b412470026624fc44ddeba25" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_AM_SVID_CONFIG_SIZE_IDX</name>
        <initializer>(0u)</initializer>
        <briefdescription>
<para>Index of size of Alternate Mode configuration packet. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="94" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1gae511cfb23203436fb76ac4b19731fdb9" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_AM_SVID_CONFIG_OFFSET_IDX</name>
        <initializer>(1u)</initializer>
        <briefdescription>
<para>Offset of SVID in Alternate Mode configuration packet. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="97" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1ga69f5ef9c4bd4ce116b8a0d69810c40ca" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_AM_SVID_CONFIG_OFFSET_START_IDX</name>
        <initializer>(16u &gt;&gt; 1u)</initializer>
        <briefdescription>
<para>Offset of SVID start index in the config table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="100" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1gab0fe74033bfbfd6386678440a44fd97b" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_DFP_ALT_MODE_HPI_OFFSET</name>
        <initializer>(8u)</initializer>
        <briefdescription>
<para>Offset to get DFP Alt Modes to be enabled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="103" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1gaa54ea041cda0a61f155a7a3e4f0664d4" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_UFP_ALT_MODE_HPI_MASK</name>
        <initializer>(0xFFu)</initializer>
        <briefdescription>
<para>Mask to get UFP Alt Modes to be enabled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="106" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1ga937798655f914d851f29b6c6b43b79b2" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_SET_FLAG</name>
        <param><defname>status</defname></param>
        <param><defname>bit_idx</defname></param>
        <initializer>((status) |= ((uint32_t)1u &lt;&lt; ((uint32_t)(bit_idx))))</initializer>
        <briefdescription>
<para>Set appropriate bit_idx to 1 in the status variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="109" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1gaa0bc4f0b8a46e72932f19269accf18c9" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_REMOVE_FLAG</name>
        <param><defname>status</defname></param>
        <param><defname>bit_idx</defname></param>
        <initializer>((status) &amp;= (~((uint32_t)1u &lt;&lt; ((uint32_t)(bit_idx)))))</initializer>
        <briefdescription>
<para>Set appropriate bit_idx to 0 in the status variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="112" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__group__pdaltmode__vdm__alt__mode__manager__macros_1gaf48612bc008ae9a0e574565e9d26a259" prot="public" static="no">
        <name>CY_PDALTMODE_MNGR_IS_FLAG_CHECKED</name>
        <param><defname>status</defname></param>
        <param><defname>bit_idx</defname></param>
        <initializer>(((status) &gt;&gt; (uint32_t)(bit_idx)) &amp; <ref refid="group__group__pdaltmode__vdm__alt__mode__manager__macros_1ga0056ad2fc48f744b625895b13dadb01f" kindref="member">CY_PDALTMODE_MNGR_EN_FLAG_MASK</ref>)</initializer>
        <briefdescription>
<para>Return true if bit_idx of the status variable is set to &apos;1&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="115" column="9" bodyfile="cy_pdaltmode_mngr.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gab017e754a9ed9a0a9629fc692d0a4ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Cy_PdAltMode_Mngr_RegSvidHdlr</definition>
        <argsstring>(uint16_t svid, cy_pdaltmode_reg_alt_modes_cbk_t regSvidFn)</argsstring>
        <name>Cy_PdAltMode_Mngr_RegSvidHdlr</name>
        <param>
          <type>uint16_t</type>
          <declname>svid</declname>
        </param>
        <param>
          <type><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__data__structures_1ga27fb6543aa4d7e4251d62242ac57a906" kindref="member">cy_pdaltmode_reg_alt_modes_cbk_t</ref></type>
          <declname>regSvidFn</declname>
        </param>
        <briefdescription>
<para>Store SVID related registration function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>svid</parametername>
</parameternamelist>
<parameterdescription>
<para>Stored SVID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regSvidFn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function pointer which is used to register selected SVID</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if function was stored in Alt Modes manager, false if there&apos;s no space for new SVID handlers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="158" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="122" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga73731ef5080475c3e99ca3595bd08725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cy_PdAltMode_Mngr_Task</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext)</argsstring>
        <name>Cy_PdAltMode_Mngr_Task</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <briefdescription>
<para>Handler for PD Alt Mode level asynchronous task. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="173" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="141" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gadcf28e55c515d940ed725d86e8ca65d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga399c1777f494368601cad31a40afca9c" kindref="member">cy_en_pdaltmode_vdm_task_t</ref></type>
        <definition>cy_en_pdaltmode_vdm_task_t Cy_PdAltMode_Mngr_RegAltModeMngr</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, cy_stc_pdaltmode_atch_tgt_info_t *atchTgtInfo, cy_stc_pdaltmode_vdm_msg_info_t *vdmMsgInfo)</argsstring>
        <name>Cy_PdAltMode_Mngr_RegAltModeMngr</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__atch__tgt__info__t" kindref="compound">cy_stc_pdaltmode_atch_tgt_info_t</ref> *</type>
          <declname>atchTgtInfo</declname>
        </param>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__vdm__msg__info__t" kindref="compound">cy_stc_pdaltmode_vdm_msg_info_t</ref> *</type>
          <declname>vdmMsgInfo</declname>
        </param>
        <briefdescription>
<para>Register pointers to attached dev/ama/cable info and run Alt Modes manager if success. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>atchTgtInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to struct which holds discovery info about attached targets</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vdmMsgInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to struct which holds info of received/sent VDM</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns VDM manager task <linebreak/>
 CY_PDALTMODE_VDM_TASK_ALT_MODE if CCG supports any Alternate Mode. <linebreak/>
 If CCG does not support Alternate Modes, function returns CY_PDALTMODE_VDM_TASK_EXIT. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="198" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="152" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga3bf3d903b17da9773d466736097918ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga399c1777f494368601cad31a40afca9c" kindref="member">cy_en_pdaltmode_vdm_task_t</ref></type>
        <definition>cy_en_pdaltmode_vdm_task_t Cy_PdAltMode_Mngr_AltModeProcess</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, cy_en_pdaltmode_vdm_evt_t vdmEvt)</argsstring>
        <name>Cy_PdAltMode_Mngr_AltModeProcess</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga53976be265d41463919b3ea93da4cf30" kindref="member">cy_en_pdaltmode_vdm_evt_t</ref></type>
          <declname>vdmEvt</declname>
        </param>
        <briefdescription>
<para>Used by DFP VDM manager to run Alt Modes manager processing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vdmEvt</parametername>
</parameternamelist>
<parameterdescription>
<para>Current DFP VDM manager event</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DFP VDM manager task based on Alt Modes manager processing results </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="217" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="255" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gaf62de0233d07b708ade606d92097eb44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cy_en_pdstack_std_vdm_cmd_type_t</type>
        <definition>cy_en_pdstack_std_vdm_cmd_type_t Cy_PdAltMode_Mngr_EvalRecVdm</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, const cy_stc_pdstack_pd_packet_t *vdm)</argsstring>
        <name>Cy_PdAltMode_Mngr_EvalRecVdm</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>const cy_stc_pdstack_pd_packet_t *</type>
          <declname>vdm</declname>
        </param>
        <briefdescription>
<para>Run received VDM analysis if CCG is UFP. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vdm</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to pd packet which contains received VDM</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if received VDM could handle successfully and VDM response need to be sent with ACK. If received VDM should be NACKed, then returns false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="237" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="2165" bodyend="2399"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga1fbf0e1152b2664f42d7a74afaccc48e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const uint32_t *</type>
        <definition>const uint32_t* Cy_PdAltMode_Mngr_FormAltModeEvent</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, uint16_t svid, uint8_t amIdx, cy_en_pdaltmode_app_evt_t evt, uint32_t data)</argsstring>
        <name>Cy_PdAltMode_Mngr_FormAltModeEvent</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>svid</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>amIdx</declname>
        </param>
        <param>
          <type><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga9a0d2881cd562cf3f08968d5d5c0e4e3" kindref="member">cy_en_pdaltmode_app_evt_t</ref></type>
          <declname>evt</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Fill Alt Mode APP event fields with appropriate values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>svid</parametername>
</parameternamelist>
<parameterdescription>
<para>SVID of Alternate Mode which event refers to</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of Alternate Mode in compatibility table which event refers to</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evt</parametername>
</parameternamelist>
<parameterdescription>
<para>Alternate Mode APP event</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Alternate Mode APP event data</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the event related data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="265" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1826" bodyend="1843"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga3d25c80027d29b651d5fdfbaa8bac169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Cy_PdAltMode_Mngr_IsAltModeMngrIdle</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext)</argsstring>
        <name>Cy_PdAltMode_Mngr_IsAltModeMngrIdle</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <briefdescription>
<para>Check whether the VDM manager for the selected port is idle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if manager is busy, false if idle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="307" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="214" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gadfe2545c2c006fbe9aa5fad404715ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cy_PdAltMode_Mngr_ResetAltModeInfo</definition>
        <argsstring>(cy_stc_pdaltmode_mngr_info_t *info)</argsstring>
        <name>Cy_PdAltMode_Mngr_ResetAltModeInfo</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__mngr__info__t" kindref="compound">cy_stc_pdaltmode_mngr_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Resets Alternate Mode command info structure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alternate Mode info structure</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="355" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1596" bodyend="1599"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga89173b9669b86122b339d18c17f1944b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t Cy_PdAltMode_Mngr_IsSvidSupported</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, uint16_t svid)</argsstring>
        <name>Cy_PdAltMode_Mngr_IsSvidSupported</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>svid</declname>
        </param>
        <briefdescription>
<para>Check for presence of alt modes for given svid in alt modes compatibility table. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>svid</parametername>
</parameternamelist>
<parameterdescription>
<para>Received SVID</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of supported SVID by CCG </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="373" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1300" bodyend="1314"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga478535f1c2c1e90be5a746b91b3650c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t Cy_PdAltMode_Mngr_GetStatus</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetStatus</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <briefdescription>
<para>Retrieve the current Alternate Mode status for a PD port. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Alternate Mode status </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="388" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="2401" bodyend="2437"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gafbc0b0277e703d4a4eaedc8a22ae4008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cy_PdAltMode_Mngr_LayerReset</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext)</argsstring>
        <name>Cy_PdAltMode_Mngr_LayerReset</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <briefdescription>
<para>Reset Alt Modes layer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="403" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1652" bodyend="1660"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga555c8882136ad6a28ee79351f687f4b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cy_PdAltMode_Mngr_ResetInfo</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext)</argsstring>
        <name>Cy_PdAltMode_Mngr_ResetInfo</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <briefdescription>
<para>Reset the Alternate Mode manager state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="418" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1601" bodyend="1604"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gad99145923f4f4d9e381b5af445ccb002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cy_PdAltMode_Mngr_ExitAll</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, bool sendVdmExit, cy_pdstack_pd_cbk_t exitAllCbk)</argsstring>
        <name>Cy_PdAltMode_Mngr_ExitAll</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sendVdmExit</declname>
        </param>
        <param>
          <type>cy_pdstack_pd_cbk_t</type>
          <declname>exitAllCbk</declname>
        </param>
        <briefdescription>
<para>Exit all active Alternate Modes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sendVdmExit</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag which indicates if sending Exit VDM is required during exit all modes procedure</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exitAllCbk</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback which will call after exit all Alt Modes procedure will be finished</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="439" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1609" bodyend="1649"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga1d6649eff94658f66fd19b181b79c9ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t Cy_PdAltMode_Mngr_GetAltModeNumb</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetAltModeNumb</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <briefdescription>
<para>Get number of Alternate Modes for chosen port. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of Alternate Modes for chosen port and current data role </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="454" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1569" bodyend="1594"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga752e755627029c3e7d0fc4976a293501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t Cy_PdAltMode_Mngr_GetAltModesConfigSvidIdx</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, cy_en_pd_port_type_t type, uint16_t svid)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetAltModesConfigSvidIdx</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>cy_en_pd_port_type_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>svid</declname>
        </param>
        <briefdescription>
<para>Get index of selected SVID from config table. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the port i.e., cy_en_pd_port_type_t</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>svid</parametername>
</parameternamelist>
<parameterdescription>
<para>SVID</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SVID index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="475" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1494" bodyend="1523"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gacc768c61253c00bae9f27d1ecee3a09e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cy_PdAltMode_Mngr_SetAltModeMask</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, uint16_t mask)</argsstring>
        <name>Cy_PdAltMode_Mngr_SetAltModeMask</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Set mask for Alternate Modes which should be enabled. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="493" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1428" bodyend="1443"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gaa8d1042d8a8efb02e51c9ef4084b58f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Cy_PdAltMode_Mngr_SetCustomSvid</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, uint16_t svid)</argsstring>
        <name>Cy_PdAltMode_Mngr_SetCustomSvid</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>svid</declname>
        </param>
        <briefdescription>
<para>Set Alternate Modes custom SVID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>svid</parametername>
</parameternamelist>
<parameterdescription>
<para>SVID</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the SVID is set, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="511" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1316" bodyend="1401"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga21f419b2e94ce46c2f54cd9b7486d3ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t Cy_PdAltMode_Mngr_GetCustomSvid</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetCustomSvid</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <briefdescription>
<para>Returns alternate modes custom SVID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SVID value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="526" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1403" bodyend="1426"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga39ccb7635082b6d195255b5b5e1ad8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t Cy_PdAltMode_Mngr_GetSvidFromIdx</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, uint8_t idx)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetSvidFromIdx</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Returns SVID which is at index position in configuration table if such SVID is available. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PdAltMode Library Context pointer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the SVID</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SVID value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="544" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1445" bodyend="1470"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga680eb7d056342686f4fac71757186e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcy__stc__pdaltmode__mngr__info__t" kindref="compound">cy_stc_pdaltmode_mngr_info_t</ref> *</type>
        <definition>cy_stc_pdaltmode_mngr_info_t* Cy_PdAltMode_Mngr_GetModeInfo</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, uint8_t altModeIdx)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetModeInfo</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>altModeIdx</declname>
        </param>
        <briefdescription>
<para>Get Alt Mode info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Alt Mode Library Context pointer</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>altModeIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>Alt Mode index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the Alternate Mode info </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="562" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1845" bodyend="1848"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga8af23f8a041d2feaaa19b2dc2fade6db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cy_en_pdstack_usb_data_sig_t</type>
        <definition>cy_en_pdstack_usb_data_sig_t Cy_PdAltMode_Mngr_GetCableUsbCap</definition>
        <argsstring>(cy_stc_pdstack_context_t *ptrPdStackContext)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetCableUsbCap</name>
        <param>
          <type>cy_stc_pdstack_context_t *</type>
          <declname>ptrPdStackContext</declname>
        </param>
        <briefdescription>
<para>Function returns Cable USB capabilities. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrPdStackContext</parametername>
</parameternamelist>
<parameterdescription>
<para>PD Stack Library Context pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Return Cable USB capabilities </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="577" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="2440" bodyend="2465"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gab296e4407c3ed159b2fde025b9faa531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Cy_PdAltMode_Mngr_GetModesVdoInfo</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, uint16_t svid, cy_pd_pd_do_t **tempP, uint8_t *no_of_vdo)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetModesVdoInfo</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>svid</declname>
        </param>
        <param>
          <type>cy_pd_pd_do_t **</type>
          <declname>tempP</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>no_of_vdo</declname>
        </param>
        <briefdescription>
<para>Get modes info for the SVID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>svid</parametername>
</parameternamelist>
<parameterdescription>
<para>SVID number</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tempP</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to VDO info</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>no_of_vdo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to number of VDOs</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if SIVD mode info is found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="601" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1957" bodyend="1992"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga3f3adc38c3ebf530b8b7eb15daaf4761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcy__stc__pdaltmode__alt__mode__mngr__status__t" kindref="compound">cy_stc_pdaltmode_alt_mode_mngr_status_t</ref> *</type>
        <definition>cy_stc_pdaltmode_alt_mode_mngr_status_t* Cy_PdAltMode_Mngr_GetMngrStatus</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetMngrStatus</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Returns Alt Mode manager status pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected port</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns pointer to Alt Mode manager status structure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="701" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gaa07ffabf22d61e39aef956f9beed3b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcy__stc__pdaltmode__status__t" kindref="compound">cy_stc_pdaltmode_status_t</ref> *</type>
        <definition>cy_stc_pdaltmode_status_t* Cy_PdAltMode_Mngr_GetAmStatus</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetAmStatus</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Returns Alt Modes layer status pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected port</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns pointer to Alt Modes status structure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="716" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga4fd209e2c23814174cefa167df1e9c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cy_PdAltMode_Mngr_SetDiscModeParams</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, cy_en_pd_sop_t sop)</argsstring>
        <name>Cy_PdAltMode_Mngr_SetDiscModeParams</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>cy_en_pd_sop_t</type>
          <declname>sop</declname>
        </param>
        <briefdescription>
<para>Set Discovery ID/SVID/Mode mode parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sop</parametername>
</parameternamelist>
<parameterdescription>
<para>SOP/SOP&apos;/SOP" packet type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="730" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="261" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga107416049c590008678b7b0f5a8ace6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cy_PdAltMode_Mngr_SendSlnEventNoData</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, uint16_t svid, uint8_t am_id, cy_en_pdaltmode_app_evt_t evtype)</argsstring>
        <name>Cy_PdAltMode_Mngr_SendSlnEventNoData</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>svid</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>am_id</declname>
        </param>
        <param>
          <type><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga9a0d2881cd562cf3f08968d5d5c0e4e3" kindref="member">cy_en_pdaltmode_app_evt_t</ref></type>
          <declname>evtype</declname>
        </param>
        <briefdescription>
<para>Sends solution event without additional data info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>svid</parametername>
</parameternamelist>
<parameterdescription>
<para>SVID for which event is related </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>am_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Alternate Mode ID for which event is related </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evtype</parametername>
</parameternamelist>
<parameterdescription>
<para>Application event type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="746" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="283" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gadc5dd798d3f553eddf7f60abaa75aa08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cy_PdAltMode_Mngr_SendSlnAppEvt</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, uint32_t data)</argsstring>
        <name>Cy_PdAltMode_Mngr_SendSlnAppEvt</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Sends solution event with additional data info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data related to the solution event</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="760" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="289" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga65c74a03705ecd33a967adcbb5fcb61e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cy_PdAltMode_Mngr_SendAppEvtWrapper</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, cy_stc_pdaltmode_alt_mode_reg_info_t *reg)</argsstring>
        <name>Cy_PdAltMode_Mngr_SendAppEvtWrapper</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__alt__mode__reg__info__t" kindref="compound">cy_stc_pdaltmode_alt_mode_reg_info_t</ref> *</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Wrapper to send solution event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Alternate Mode register structure pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="774" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="297" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga1e38a373e28bc66aa5e9dcc274f19d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga399c1777f494368601cad31a40afca9c" kindref="member">cy_en_pdaltmode_vdm_task_t</ref></type>
        <definition>cy_en_pdaltmode_vdm_task_t Cy_PdAltMode_Mngr_RunDiscModeWrapper</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext)</argsstring>
        <name>Cy_PdAltMode_Mngr_RunDiscModeWrapper</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <briefdescription>
<para>Wrapper to prepare and send Discovery Mode command. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Next VMD manager task </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="787" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="312" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gad1f1e58da823cecd52a9f0ed9388dc06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cy_PdAltMode_Mngr_HandleCblDiscMode</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, bool failed)</argsstring>
        <name>Cy_PdAltMode_Mngr_HandleCblDiscMode</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>failed</declname>
        </param>
        <briefdescription>
<para>Handler for processing cable Discovery Mode response. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>failed</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicator if cable Discovery command failed or not</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="801" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="378" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga1fef2055e19555f7ce0bb6da1892c733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga399c1777f494368601cad31a40afca9c" kindref="member">cy_en_pdaltmode_vdm_task_t</ref></type>
        <definition>cy_en_pdaltmode_vdm_task_t Cy_PdAltMode_Mngr_EvalDiscModeWrapper</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext)</argsstring>
        <name>Cy_PdAltMode_Mngr_EvalDiscModeWrapper</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <briefdescription>
<para>Wrapper to evaluate Discovery Mode command. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Next VMD manager task </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="814" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="466" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga281673cbbdaf3d448b27be79c35a9595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga399c1777f494368601cad31a40afca9c" kindref="member">cy_en_pdaltmode_vdm_task_t</ref></type>
        <definition>cy_en_pdaltmode_vdm_task_t Cy_PdAltMode_Mngr_DiscModeFailWrapper</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext)</argsstring>
        <name>Cy_PdAltMode_Mngr_DiscModeFailWrapper</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <briefdescription>
<para>Wrapper to evaluate failed Discovery Mode command. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Next VMD manager task </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="827" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="570" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gad11ad9e491c8b81156d790d464b958a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cy_en_pd_sop_t</type>
        <definition>cy_en_pd_sop_t Cy_PdAltMode_Mngr_MonitorGetSopState</definition>
        <argsstring>(cy_stc_pdaltmode_mngr_info_t *amInfoP, uint8_t faultStatus)</argsstring>
        <name>Cy_PdAltMode_Mngr_MonitorGetSopState</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__mngr__info__t" kindref="compound">cy_stc_pdaltmode_mngr_info_t</ref> *</type>
          <declname>amInfoP</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>faultStatus</declname>
        </param>
        <briefdescription>
<para>Returns selected Alternate Mode SOP/SOP&apos;/SOP&apos;&apos; pending messages after receiving first response. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amInfoP</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alternate Mode info structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>faultStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>Status of previous command which was sent by Alt Mode manager</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SOP type of next message to be sent </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="841" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="592" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gaed213a3d17ac1f957ac1f5f7ba371a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga399c1777f494368601cad31a40afca9c" kindref="member">cy_en_pdaltmode_vdm_task_t</ref></type>
        <definition>cy_en_pdaltmode_vdm_task_t Cy_PdAltMode_Mngr_FailAltModesWrapper</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext)</argsstring>
        <name>Cy_PdAltMode_Mngr_FailAltModesWrapper</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <briefdescription>
<para>Wrapper to evaluate failed Alternate Mode commands. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Next VMD manager task </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="854" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1057" bodyend="1106"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gac571fd05006db56ee995d711833aa04b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t Cy_PdAltMode_Mngr_GetNextAltMode</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetNextAltMode</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <briefdescription>
<para>Finds next available Alt Mode for further processing. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of next available Alternate Mode, otherwise returns 0xFF </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="867" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1109" bodyend="1169"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gab24c1b92f8c9c6fbecb26287f65348ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t Cy_PdAltMode_Mngr_MoveToVdmInfo</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, cy_stc_pdaltmode_mngr_info_t *info, cy_en_pd_sop_t sopType)</argsstring>
        <name>Cy_PdAltMode_Mngr_MoveToVdmInfo</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__mngr__info__t" kindref="compound">cy_stc_pdaltmode_mngr_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>cy_en_pd_sop_t</type>
          <declname>sopType</declname>
        </param>
        <briefdescription>
<para>Composes Alt Mode info to vdm_msg_info_t struct before sending. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the selected Alternate Mode info structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sopType</parametername>
</parameternamelist>
<parameterdescription>
<para>SOP/SOP&apos;/SOP" message type to send</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-zero if function proceed is successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="882" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1173" bodyend="1207"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga5fbf0d21a0966dc7c9baf05f92392485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cy_PdAltMode_Mngr_GetVdmInfoVdo</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, cy_stc_pdaltmode_mngr_info_t *info, cy_en_pd_sop_t sopType)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetVdmInfoVdo</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__mngr__info__t" kindref="compound">cy_stc_pdaltmode_mngr_info_t</ref> *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>cy_en_pd_sop_t</type>
          <declname>sopType</declname>
        </param>
        <briefdescription>
<para>Parses received VDM info and moves it to Alt Mode info struct. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the selected Alternate Mode info structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sopType</parametername>
</parameternamelist>
<parameterdescription>
<para>SOP/SOP&apos;/SOP" message type to send</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="897" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1209" bodyend="1231"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga04b02b1783c3a43c7200a90c9b7589da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t *</type>
        <definition>uint16_t* Cy_PdAltMode_Mngr_GetAltModesVdoInfo</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, cy_en_pd_port_type_t type, uint8_t idx)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetAltModesVdoInfo</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>cy_en_pd_port_type_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Returns Alternate Mode info from config table. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Port data role </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected Alternate Mode index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to selected Alternate Mode configuration if present, otherwise NULL pointer is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="912" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1472" bodyend="1492"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gad4eaadff8abc137288a29f9d7dd0e5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t Cy_PdAltMode_Mngr_GetBaseAltModeSvidIdx</definition>
        <argsstring>(cy_stc_pdaltmode_context_t *ptrAltModeContext, uint16_t svid)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetBaseAltModeSvidIdx</name>
        <param>
          <type><ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref> *</type>
          <declname>ptrAltModeContext</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>svid</declname>
        </param>
        <briefdescription>
<para>Returns Alt Mode index for given SVID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrAltModeContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Alt Mode context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>svid</parametername>
</parameternamelist>
<parameterdescription>
<para>SVID 2-bytes value that the selected Alt Mode is related to</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SVID related Alternate Mode index, otherwise returns 0xFF. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="926" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1526" bodyend="1550"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gaa03b5dccaf9a97b23fd3ed92af8425b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Cy_PdAltMode_Mngr_AttentionCbk</definition>
        <argsstring>(cy_timer_id_t id, void *context)</argsstring>
        <name>Cy_PdAltMode_Mngr_AttentionCbk</name>
        <param>
          <type>cy_timer_id_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>Callback to process saved Attention VDM. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer ID used to postpone received Attention VDM </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>context</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer callback context</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="940" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="1893" bodyend="1905"/>
      </memberdef>
      <memberdef kind="function" id="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga5e15088a735339c3625bbd6c0871f766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcy__stc__pdaltmode__reg__am__t" kindref="compound">cy_stc_pdaltmode_reg_am_t</ref> *</type>
        <definition>cy_stc_pdaltmode_reg_am_t* Cy_PdAltMode_Mngr_GetRegAmInfo</definition>
        <argsstring>(uint8_t idx)</argsstring>
        <name>Cy_PdAltMode_Mngr_GetRegAmInfo</name>
        <param>
          <type>uint8_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Returns pointer to the registry structure related to the selected Alt Mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected alternate mode index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the registry structure related to the selected Alt Mode, otherwise returns NULL pointer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cy_pdaltmode_mngr.h" line="954" column="1" bodyfile="cy_pdaltmode_mngr.c" bodystart="117" bodyend="120"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This header file defines the data structures and function prototypes associated with the Alternate Mode Source implementation. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="version"><para>1.0</para></simplesect>
<simplesect kind="copyright"><para>Copyright 2024, Cypress Semiconductor Corporation (an Infineon company) or an affiliate of Cypress Semiconductor Corporation. All rights reserved. You may use this file only in accordance with the license, terms, conditions, disclaimers, and limitations in the end user license agreement accompanying the software package with which this file was provided. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************/</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor">#ifndef<sp/>_CY_PDALTMODE_MNGR_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CY_PDALTMODE_MNGR_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>Header<sp/>file<sp/>addition</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cy_pdaltmode_defines.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>MACRO<sp/>definition</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_ATCH_TGT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_CABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(2u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_MODE_NOT_SUPPORTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0xFFu)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_EMPTY_VDO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x00000000u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_NONE_VDO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0xFFFFFFFFu)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_VDO_START_IDX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_NONE_MODE_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x00000000u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_FULL_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0xFFFFFFFFu)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_EN_FLAG_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x00000001u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_EXIT_ALL_MODES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x7u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_CBL_DIR_SUPP_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x780u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_ALT_MODE_EVT_IDX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_ALT_MODE_EVT_DATA_IDX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_NO_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_MAX_RETRY_CNT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(9u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_AM_SVID_CONFIG_SIZE_IDX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_AM_SVID_CONFIG_OFFSET_IDX<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_AM_SVID_CONFIG_OFFSET_START_IDX<sp/><sp/><sp/><sp/>(16u<sp/>&gt;&gt;<sp/>1u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_DFP_ALT_MODE_HPI_OFFSET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(8u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_UFP_ALT_MODE_HPI_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0xFFu)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_SET_FLAG(status,<sp/>bit_idx)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((status)<sp/>|=<sp/>((uint32_t)1u<sp/>&lt;&lt;<sp/>((uint32_t)(bit_idx))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_REMOVE_FLAG(status,<sp/>bit_idx)<sp/><sp/><sp/><sp/>((status)<sp/>&amp;=<sp/>(~((uint32_t)1u<sp/>&lt;&lt;<sp/>((uint32_t)(bit_idx)))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor">#define<sp/>CY_PDALTMODE_MNGR_IS_FLAG_CHECKED(status,<sp/>bit_idx)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((status)<sp/>&gt;&gt;<sp/>(uint32_t)(bit_idx))<sp/>&amp;<sp/>CY_PDALTMODE_MNGR_EN_FLAG_MASK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>Enumerated<sp/>data<sp/>definition</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>Global<sp/>function<sp/>declaration</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="141"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_RegSvidHdlr</highlight></codeline>
<codeline lineno="142"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="155"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gab017e754a9ed9a0a9629fc692d0a4ad2" kindref="member">Cy_PdAltMode_Mngr_RegSvidHdlr</ref>(uint16_t<sp/>svid,<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__data__structures_1ga27fb6543aa4d7e4251d62242ac57a906" kindref="member">cy_pdaltmode_reg_alt_modes_cbk_t</ref><sp/>regSvidFn);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="158"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_Task</highlight></codeline>
<codeline lineno="159"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="170"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga73731ef5080475c3e99ca3595bd08725" kindref="member">Cy_PdAltMode_Mngr_Task</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="174"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_RegAltModeMngr</highlight></codeline>
<codeline lineno="175"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga399c1777f494368601cad31a40afca9c" kindref="member">cy_en_pdaltmode_vdm_task_t</ref><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gadcf28e55c515d940ed725d86e8ca65d6" kindref="member">Cy_PdAltMode_Mngr_RegAltModeMngr</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/><ref refid="structcy__stc__pdaltmode__atch__tgt__info__t" kindref="compound">cy_stc_pdaltmode_atch_tgt_info_t</ref>*<sp/>atchTgtInfo,<sp/><ref refid="structcy__stc__pdaltmode__vdm__msg__info__t" kindref="compound">cy_stc_pdaltmode_vdm_msg_info_t</ref>*<sp/>vdmMsgInfo);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="199"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_AltModeProcess</highlight></codeline>
<codeline lineno="200"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga399c1777f494368601cad31a40afca9c" kindref="member">cy_en_pdaltmode_vdm_task_t</ref><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga3bf3d903b17da9773d466736097918ec" kindref="member">Cy_PdAltMode_Mngr_AltModeProcess</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga53976be265d41463919b3ea93da4cf30" kindref="member">cy_en_pdaltmode_vdm_evt_t</ref><sp/>vdmEvt);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="218"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_EvalRecVdm</highlight></codeline>
<codeline lineno="219"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="234"><highlight class="normal">cy_en_pdstack_std_vdm_cmd_type_t<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gaf62de0233d07b708ade606d92097eb44" kindref="member">Cy_PdAltMode_Mngr_EvalRecVdm</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cy_stc_pdstack_pd_packet_t<sp/>*vdm);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="238"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_FormAltModeEvent</highlight></codeline>
<codeline lineno="239"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="262"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga1fbf0e1152b2664f42d7a74afaccc48e" kindref="member">Cy_PdAltMode_Mngr_FormAltModeEvent</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>uint16_t<sp/>svid,<sp/>uint8_t<sp/>amIdx,<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga9a0d2881cd562cf3f08968d5d5c0e4e3" kindref="member">cy_en_pdaltmode_app_evt_t</ref><sp/>evt,<sp/>uint32_t<sp/>data);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>((CY_HPI_ENABLED)<sp/>||<sp/>(APP_ALTMODE_CMD_ENABLE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="266"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_EvalAppAltModeCmd</highlight></codeline>
<codeline lineno="267"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="286"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Cy_PdAltMode_Mngr_EvalAppAltModeCmd(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>uint8_t<sp/>*cmd,<sp/>uint8_t<sp/>*data);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>((CY_HPI_ENABLED)<sp/>||<sp/>(APP_ALTMODE_CMD_ENABLE))<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="292"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_IsAltModeMngrIdle</highlight></codeline>
<codeline lineno="293"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="304"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga3d25c80027d29b651d5fdfbaa8bac169" kindref="member">Cy_PdAltMode_Mngr_IsAltModeMngrIdle</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SYS_DEEPSLEEP_ENABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="308"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_Sleep</highlight></codeline>
<codeline lineno="309"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="321"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cy_PdAltMode_Mngr_Sleep(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="324"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_Wakeup</highlight></codeline>
<codeline lineno="325"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="336"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cy_PdAltMode_Mngr_Wakeup(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SYS_DEEPSLEEP_ENABLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="340"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_ResetAltModeInfo</highlight></codeline>
<codeline lineno="341"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="352"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gadfe2545c2c006fbe9aa5fad404715ec9" kindref="member">Cy_PdAltMode_Mngr_ResetAltModeInfo</ref>(<ref refid="structcy__stc__pdaltmode__mngr__info__t" kindref="compound">cy_stc_pdaltmode_mngr_info_t</ref>*<sp/>info);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="355"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_IsSvidSupported</highlight></codeline>
<codeline lineno="356"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="370"><highlight class="normal">uint8_t<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga89173b9669b86122b339d18c17f1944b" kindref="member">Cy_PdAltMode_Mngr_IsSvidSupported</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>uint16_t<sp/>svid);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="373"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetStatus</highlight></codeline>
<codeline lineno="374"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="385"><highlight class="normal">uint32_t<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga478535f1c2c1e90be5a746b91b3650c8" kindref="member">Cy_PdAltMode_Mngr_GetStatus</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="388"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_LayerReset</highlight></codeline>
<codeline lineno="389"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="400"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gafbc0b0277e703d4a4eaedc8a22ae4008" kindref="member">Cy_PdAltMode_Mngr_LayerReset</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="403"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_ResetInfo</highlight></codeline>
<codeline lineno="404"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="415"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga555c8882136ad6a28ee79351f687f4b1" kindref="member">Cy_PdAltMode_Mngr_ResetInfo</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="418"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_ExitAll</highlight></codeline>
<codeline lineno="419"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="436"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gad99145923f4f4d9e381b5af445ccb002" kindref="member">Cy_PdAltMode_Mngr_ExitAll</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sendVdmExit,<sp/>cy_pdstack_pd_cbk_t<sp/>exitAllCbk);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="439"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetAltModeNumb</highlight></codeline>
<codeline lineno="440"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="451"><highlight class="normal">uint8_t<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga1d6649eff94658f66fd19b181b79c9ea" kindref="member">Cy_PdAltMode_Mngr_GetAltModeNumb</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="454"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetAltModesConfigSvidIdx</highlight></codeline>
<codeline lineno="455"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="472"><highlight class="normal">uint8_t<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga752e755627029c3e7d0fc4976a293501" kindref="member">Cy_PdAltMode_Mngr_GetAltModesConfigSvidIdx</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>cy_en_pd_port_type_t<sp/>type,<sp/>uint16_t<sp/>svid);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="475"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_SetAltModeMask</highlight></codeline>
<codeline lineno="476"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="490"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gacc768c61253c00bae9f27d1ecee3a09e" kindref="member">Cy_PdAltMode_Mngr_SetAltModeMask</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>uint16_t<sp/>mask);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="493"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_SetCustomSvid</highlight></codeline>
<codeline lineno="494"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="508"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gaa8d1042d8a8efb02e51c9ef4084b58f1" kindref="member">Cy_PdAltMode_Mngr_SetCustomSvid</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>uint16_t<sp/>svid);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="511"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetCustomSvid</highlight></codeline>
<codeline lineno="512"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="523"><highlight class="normal">uint16_t<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga21f419b2e94ce46c2f54cd9b7486d3ae" kindref="member">Cy_PdAltMode_Mngr_GetCustomSvid</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="526"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetSvidFromIdx</highlight></codeline>
<codeline lineno="527"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="541"><highlight class="normal">uint16_t<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga39ccb7635082b6d195255b5b5e1ad8e4" kindref="member">Cy_PdAltMode_Mngr_GetSvidFromIdx</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>uint8_t<sp/>idx);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="544"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetModeInfo</highlight></codeline>
<codeline lineno="545"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><ref refid="structcy__stc__pdaltmode__mngr__info__t" kindref="compound">cy_stc_pdaltmode_mngr_info_t</ref>*<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga680eb7d056342686f4fac71757186e10" kindref="member">Cy_PdAltMode_Mngr_GetModeInfo</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>uint8_t<sp/>altModeIdx);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="562"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetCableUsbCap</highlight></codeline>
<codeline lineno="563"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="574"><highlight class="normal">cy_en_pdstack_usb_data_sig_t<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga8af23f8a041d2feaaa19b2dc2fade6db" kindref="member">Cy_PdAltMode_Mngr_GetCableUsbCap</ref>(cy_stc_pdstack_context_t<sp/>*ptrPdStackContext);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="577"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetModesVdoInfo</highlight></codeline>
<codeline lineno="578"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="598"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gab296e4407c3ed159b2fde025b9faa531" kindref="member">Cy_PdAltMode_Mngr_GetModesVdoInfo</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*<sp/>ptrAltModeContext,<sp/>uint16_t<sp/>svid,<sp/>cy_pd_pd_do_t<sp/>**tempP,<sp/>uint8_t<sp/>*no_of_vdo);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>CCG_UCSI_ENABLE<sp/>&amp;&amp;<sp/>UCSI_ALT_MODE_ENABLED<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="603"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetActiveAltModeMask</highlight></codeline>
<codeline lineno="604"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="615"><highlight class="normal">uint32_t<sp/>Cy_PdAltMode_Mngr_GetActiveAltModeMask(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="618"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_SetActiveAltModeState</highlight></codeline>
<codeline lineno="619"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="634"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cy_PdAltMode_Mngr_SetActiveAltModeState(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>uint8_t<sp/>altModeIdx);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="637"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetSuppAltModes</highlight></codeline>
<codeline lineno="638"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="649"><highlight class="normal">uint32_t<sp/>Cy_PdAltMode_Mngr_GetSuppAltModes(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*CCG_UCSI_ENABLE<sp/>&amp;&amp;<sp/>UCSI_ALT_MODE_ENABLED*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>UFP_ALT_MODE_SUPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(CCG_BB_ENABLE<sp/>!=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="657"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_BillboardUpdate</highlight></codeline>
<codeline lineno="658"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="681"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cy_PdAltMode_Mngr_BillboardUpdate(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>uint8_t<sp/>amIdx,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bbStat);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(CCG_BB_ENABLE<sp/>!=<sp/>0)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>UFP_ALT_MODE_SUPP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="686"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetMngrStatus</highlight></codeline>
<codeline lineno="687"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><ref refid="structcy__stc__pdaltmode__alt__mode__mngr__status__t" kindref="compound">cy_stc_pdaltmode_alt_mode_mngr_status_t</ref>*<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga3f3adc38c3ebf530b8b7eb15daaf4761" kindref="member">Cy_PdAltMode_Mngr_GetMngrStatus</ref>(uint8_t<sp/>port);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="701"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetAmStatus</highlight></codeline>
<codeline lineno="702"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><ref refid="structcy__stc__pdaltmode__status__t" kindref="compound">cy_stc_pdaltmode_status_t</ref>*<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gaa07ffabf22d61e39aef956f9beed3b8b" kindref="member">Cy_PdAltMode_Mngr_GetAmStatus</ref>(uint8_t<sp/>port);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="716"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_SetDiscModeParams</highlight></codeline>
<codeline lineno="717"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="727"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga4fd209e2c23814174cefa167df1e9c50" kindref="member">Cy_PdAltMode_Mngr_SetDiscModeParams</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>cy_en_pd_sop_t<sp/>sop);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="730"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_SendSlnEventNoData</highlight></codeline>
<codeline lineno="731"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="743"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga107416049c590008678b7b0f5a8ace6d" kindref="member">Cy_PdAltMode_Mngr_SendSlnEventNoData</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>uint16_t<sp/>svid,<sp/>uint8_t<sp/>am_id,<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga9a0d2881cd562cf3f08968d5d5c0e4e3" kindref="member">cy_en_pdaltmode_app_evt_t</ref><sp/>evtype);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="746"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_SendSlnAppEvt</highlight></codeline>
<codeline lineno="747"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="757"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gadc5dd798d3f553eddf7f60abaa75aa08" kindref="member">Cy_PdAltMode_Mngr_SendSlnAppEvt</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>uint32_t<sp/>data);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="760"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_SendAppEvtWrapper</highlight></codeline>
<codeline lineno="761"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="771"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga65c74a03705ecd33a967adcbb5fcb61e" kindref="member">Cy_PdAltMode_Mngr_SendAppEvtWrapper</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/><ref refid="structcy__stc__pdaltmode__alt__mode__reg__info__t" kindref="compound">cy_stc_pdaltmode_alt_mode_reg_info_t</ref><sp/>*reg);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="774"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_RunDiscModeWrapper</highlight></codeline>
<codeline lineno="775"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga399c1777f494368601cad31a40afca9c" kindref="member">cy_en_pdaltmode_vdm_task_t</ref><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga1e38a373e28bc66aa5e9dcc274f19d55" kindref="member">Cy_PdAltMode_Mngr_RunDiscModeWrapper</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="787"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_HandleCblDiscMode</highlight></codeline>
<codeline lineno="788"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="798"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gad1f1e58da823cecd52a9f0ed9388dc06" kindref="member">Cy_PdAltMode_Mngr_HandleCblDiscMode</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>failed);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="801"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_EvalDiscModeWrapper</highlight></codeline>
<codeline lineno="802"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga399c1777f494368601cad31a40afca9c" kindref="member">cy_en_pdaltmode_vdm_task_t</ref><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga1fef2055e19555f7ce0bb6da1892c733" kindref="member">Cy_PdAltMode_Mngr_EvalDiscModeWrapper</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="814"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_DiscModeFailWrapper</highlight></codeline>
<codeline lineno="815"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga399c1777f494368601cad31a40afca9c" kindref="member">cy_en_pdaltmode_vdm_task_t</ref><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga281673cbbdaf3d448b27be79c35a9595" kindref="member">Cy_PdAltMode_Mngr_DiscModeFailWrapper</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="827"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_MonitorGetSopState</highlight></codeline>
<codeline lineno="828"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="838"><highlight class="normal">cy_en_pd_sop_t<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gad11ad9e491c8b81156d790d464b958a1" kindref="member">Cy_PdAltMode_Mngr_MonitorGetSopState</ref>(<ref refid="structcy__stc__pdaltmode__mngr__info__t" kindref="compound">cy_stc_pdaltmode_mngr_info_t</ref><sp/><sp/>*amInfoP,<sp/>uint8_t<sp/>faultStatus);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="841"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_FailAltModesWrapper</highlight></codeline>
<codeline lineno="842"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__enums_1ga399c1777f494368601cad31a40afca9c" kindref="member">cy_en_pdaltmode_vdm_task_t</ref><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gaed213a3d17ac1f957ac1f5f7ba371a03" kindref="member">Cy_PdAltMode_Mngr_FailAltModesWrapper</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="854"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetNextAltMode</highlight></codeline>
<codeline lineno="855"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="864"><highlight class="normal">uint8_t<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gac571fd05006db56ee995d711833aa04b" kindref="member">Cy_PdAltMode_Mngr_GetNextAltMode</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="867"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_MoveToVdmInfo</highlight></codeline>
<codeline lineno="868"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="879"><highlight class="normal">uint8_t<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gab24c1b92f8c9c6fbecb26287f65348ff" kindref="member">Cy_PdAltMode_Mngr_MoveToVdmInfo</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/><ref refid="structcy__stc__pdaltmode__mngr__info__t" kindref="compound">cy_stc_pdaltmode_mngr_info_t</ref>*<sp/>info,<sp/>cy_en_pd_sop_t<sp/>sopType);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="882"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetVdmInfoVdo</highlight></codeline>
<codeline lineno="883"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="894"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga5fbf0d21a0966dc7c9baf05f92392485" kindref="member">Cy_PdAltMode_Mngr_GetVdmInfoVdo</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/><ref refid="structcy__stc__pdaltmode__mngr__info__t" kindref="compound">cy_stc_pdaltmode_mngr_info_t</ref>*<sp/>info,<sp/>cy_en_pd_sop_t<sp/>sopType);</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="897"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetVdmInfoVdo</highlight></codeline>
<codeline lineno="898"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="909"><highlight class="normal">uint16_t*<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga04b02b1783c3a43c7200a90c9b7589da" kindref="member">Cy_PdAltMode_Mngr_GetAltModesVdoInfo</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>cy_en_pd_port_type_t<sp/>type,<sp/>uint8_t<sp/>idx);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="912"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetBaseAltModeSvidIdx</highlight></codeline>
<codeline lineno="913"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="923"><highlight class="normal">uint8_t<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gad4eaadff8abc137288a29f9d7dd0e5ef" kindref="member">Cy_PdAltMode_Mngr_GetBaseAltModeSvidIdx</ref>(<ref refid="structcy__stc__pdaltmode__context__t" kindref="compound">cy_stc_pdaltmode_context_t</ref><sp/>*ptrAltModeContext,<sp/>uint16_t<sp/>svid);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="926"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_AttentionCbk</highlight></codeline>
<codeline lineno="927"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="937"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1gaa03b5dccaf9a97b23fd3ed92af8425b0" kindref="member">Cy_PdAltMode_Mngr_AttentionCbk</ref>(cy_timer_id_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="940"><highlight class="comment">*<sp/>Function<sp/>name:<sp/>Cy_PdAltMode_Mngr_GetRegAmInfo</highlight></codeline>
<codeline lineno="941"><highlight class="comment">****************************************************************************/</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><ref refid="structcy__stc__pdaltmode__reg__am__t" kindref="compound">cy_stc_pdaltmode_reg_am_t</ref>*<sp/><ref refid="group__group__pdaltmode__vdm__alt__mode__manager__functions_1ga5e15088a735339c3625bbd6c0871f766" kindref="member">Cy_PdAltMode_Mngr_GetRegAmInfo</ref>(uint8_t<sp/>idx);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_CY_PDALTMODE_MNGR_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>[]<sp/>END<sp/>OF<sp/>FILE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="cy_pdaltmode_mngr.h"/>
  </compounddef>
</doxygen>
